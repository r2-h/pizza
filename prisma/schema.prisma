generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id         Int      @id @default(autoincrement())
  fullName   String
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  provider   String?
  providerId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart             Cart?
  verificationCode VerificationCode?

  orders Order[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients  Ingredient[]
  productItems ProductItem[]
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  products  Product[]
}

model ProductItem {
  id        Int      @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItems CartItem[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  totalAmount Int      @default(0)
  tokenId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int
  cart          Cart        @relation(fields: [cartId], references: [id])
  cartId        Int

  ingredients Ingredient[]
}

model Order {
  id                Int         @id @default(autoincrement())
  token             String
  totalAmount       Int
  orderStatus       OrderStatus
  items             Json
  recipientFullName String
  recipientPhone    String
  recipientEmail    String
  recipientAddress  String
  recipientComment  String?
  paymentId         Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@unique([code, userId])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANSELED
}

enum UserRole {
  ADMIN
  USER
}
